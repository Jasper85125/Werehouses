name: CI and Release

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'
  release:
    types:
      - published

jobs:
  csharp-build-and-test:
    runs-on: ubuntu-latest
    env:
      DOTNET_INSTALL_DIR: ..dotnet

    strategy:
      matrix:
        language: [csharp]
        version: [V1, V2]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      if: matrix.language == 'csharp'
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'
        install-dir: ${{ runner.temp }}/dotnet

    - name: Restore dependencies
      if: matrix.language == 'csharp'
      run: dotnet restore ./${{ matrix.version }}/Cargohub/Werehouses.sln

    - name: Build solution
      if: matrix.language == 'csharp'
      run: |
        dotnet build ./${{ matrix.version }}/Cargohub/Werehouses.sln --configuration Release --no-restore
      continue-on-error: true

    - name: Clean Up Old Test and Coverage Results
      if: matrix.language == 'csharp'
      run: |
        echo "Removing old TestResults and coverage reports..."
        rm -rf TestResults
        rm -rf coverage-report-${{ matrix.version }}

    - name: Run MSTest with Coverage
      if: matrix.language == 'csharp'
      run: |
        dotnet test ./${{ matrix.version }}/tests/tests.csproj --configuration Release --verbosity detailed \
          --collect:"XPlat Code Coverage" \
          --results-directory TestResults \
          /p:CollectCoverage=true /p:CoverletOutput=TestResults/coverage-results/ /p:CoverletOutputFormat=cobertura
      continue-on-error: true

    - name: Install ReportGenerator
      if: matrix.language == 'csharp'
      run: dotnet tool install --global dotnet-reportgenerator-globaltool

    - name: Generate Coverage Report
      if: matrix.language == 'csharp'
      run: |
        reportgenerator -reports:"TestResults/**/coverage.cobertura.xml" \
                        -targetdir:"coverage-report-${{ matrix.version }}" \
                        -reporttypes:"HtmlInline_AzurePipelines;Cobertura"
      env:
        PATH: $PATH:/home/runner/.dotnet/tools
        DOTNET_CLI_TELEMETRY_OPTOUT: 1
        DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1

    - name: Upload Coverage Report
      if: matrix.language == 'csharp'
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report-${{ matrix.version }}
        path: coverage-report-${{ matrix.version }}

  python-tests:
    runs-on: ubuntu-latest
    needs: csharp-build-and-test
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run application
      run: |
        dotnet build ./V1/Cargohub/Werehouses.csproj --configuration Release
        dotnet build ./V2/Cargohub/Werehouses.csproj --configuration Release
        dotnet run --configuration Release --project ./V1/Cargohub/Werehouses.csproj --urls=http://0.0.0.0:5001/ & sleep 5
        dotnet run --configuration Release --project ./V2/Cargohub/Werehouses.csproj --urls=http://0.0.0.0:5002/ & sleep 5

    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Install Python dependencies
      run: pip install -r ./PythonTests/requirements.txt

    - name: Run Python Tests
      run: |
        mkdir -p ./PythonTests/reports
        python -m xmlrunner discover -o PythonTests/reports

    - name: Upload Python Test Reports
      uses: actions/upload-artifact@v4
      with:
        name: python-test-reports
        path: PythonTests/reports

    # Build and Publish for Linux (only for release events)
    - name: Build for Linux
      if: github.event_name == 'release'
      run: |
        dotnet publish ./V1/Cargohub/Werehouses.csproj -c Release -r linux-x64 --self-contained false -o ./publish
        dotnet publish ./V2/Cargohub/Werehouses.csproj -c Release -r linux-x64 --self-contained false -o ./publish

    - name: Create ZIP package
      if: github.event_name == 'release'
      run: zip -r linux-release-v${{ github.ref_name }}.zip ./publish

    - name: Upload release artifact
      if: github.event_name == 'release'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./linux-release-v${{ github.ref_name }}.zip
        asset_name: linux-release-v${{ github.ref_name }}.zip
        asset_content_type: application/zip
