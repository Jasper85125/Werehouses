name: CI and Release

on:
  pull_request:
    branches:
      - '**'

jobs:
  csharp-build-and-test:
    runs-on: ubuntu-latest
    env:
      DOTNET_INSTALL_DIR: ..dotnet

    strategy:
      matrix:
        language: [csharp]
        version: [V1, V2]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Cache .Net depedencies
      if: matrix.language == 'csharp'
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('./**/*.csproj')}}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Setup .NET
      if: matrix.language == 'csharp'
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'

    - name: Restore dependencies
      if: matrix.language == 'csharp'
      run: dotnet restore ./${{ matrix.version }}/Cargohub/Werehouses.sln

    - name: Build solution
      if: matrix.language == 'csharp'
      run: |
        dotnet build ./${{ matrix.version }}/Cargohub/Werehouses.sln --configuration Release --no-restore
      continue-on-error: true

    - name: Clean Up Old Test and Coverage Results
      if: matrix.language == 'csharp'
      run: |
        echo "Removing old TestResults and coverage reports..."
        rm -rf TestResults
        rm -rf coverage-report-${{ matrix.version }}

    - name: Run MSTest with Coverage
      if: matrix.language == 'csharp'
      run: |
        dotnet test ./${{ matrix.version }}/tests/tests.csproj --configuration Release --verbosity detailed \
          --collect:"XPlat Code Coverage" \
          --results-directory TestResults \
          /p:CollectCoverage=true /p:CoverletOutput=TestResults/coverage-results/ /p:CoverletOutputFormat=cobertura
      continue-on-error: true

    - name: Install ReportGenerator
      if: matrix.language == 'csharp'
      run: dotnet tool install --global dotnet-reportgenerator-globaltool

    - name: Generate Coverage Report
      if: matrix.language == 'csharp'
      run: |
        reportgenerator -reports:"TestResults/**/coverage.cobertura.xml" \
                        -targetdir:"coverage-report-${{ matrix.version }}" \
                        -reporttypes:"HtmlInline_AzurePipelines;Cobertura"
      env:
        PATH: $PATH:/home/runner/.dotnet/tools
        DOTNET_CLI_TELEMETRY_OPTOUT: 1
        DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1

    - name: Upload Coverage Report
      if: matrix.language == 'csharp'
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report-${{ matrix.version }}
        path: coverage-report-${{ matrix.version }}

    - name: Coverage Report Summary
      run: |
        echo "Generating coverage summary for each page..."

        # Extract 'line-rate' values with their corresponding filenames
        coverage_details=$(grep -oP '<class name="[^"]+" filename="[^"]+" line-rate="[^"]+"' coverage-report-${{ matrix.version }}/Cobertura.xml)

        # Initialize total coverage variables
        total_coverage=0
        count=0

        # Parse each entry and add to the summary
        echo "### Coverage Details Per Page" >> $GITHUB_STEP_SUMMARY
        while read -r line; do
          filename=$(echo "$line" | grep -oP 'filename="[^"]+"' | cut -d'"' -f2)
          line_rate=$(echo "$line" | grep -oP 'line-rate="[^"]+"' | cut -d'"' -f2)
          percentage=$(echo "scale=2; $line_rate * 100" | bc)
          echo "- **$filename**: $percentage%" >> $GITHUB_STEP_SUMMARY

          # Aggregate total coverage
          total_coverage=$(echo "$total_coverage + $line_rate" | bc)
          count=$((count + 1))
        done <<< "$coverage_details"

        # Calculate and display total coverage
        if [[ $count -gt 0 ]]; then
          total_percentage=$(echo "scale=2; ($total_coverage / $count) * 100" | bc)
          echo "### Total Percentage Covered: $total_percentage%" >> $GITHUB_STEP_SUMMARY
        else
          echo "### No coverage data found." >> $GITHUB_STEP_SUMMARY
        fi


  python-tests:
    runs-on: ubuntu-latest
    needs: csharp-build-and-test
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('PythonTests/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Install Python dependencies
      run: pip install -r ./PythonTests/requirements.txt

    - name: Run application
      run: |
        dotnet build ./V1/Cargohub/Werehouses.csproj --configuration Release
        dotnet build ./V2/Cargohub/Werehouses.csproj --configuration Release
        dotnet run --configuration Release --project ./V1/Cargohub/Werehouses.csproj --urls=http://0.0.0.0:5001/ & sleep 5
        dotnet run --configuration Release --project ./V2/Cargohub/Werehouses.csproj --urls=http://0.0.0.0:5002/ & sleep 5

    - name: Run Python Tests
      run: |
        mkdir -p ./PythonTests/reports
        python -m xmlrunner discover -o PythonTests/reports

    - name: Upload Python Test Reports
      uses: actions/upload-artifact@v4
      with:
        name: python-test-reports
        path: PythonTests/reports
