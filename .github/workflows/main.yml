name: CI and Release

on:
  pull_request:
    branches:
      - '**'

jobs:
  csharp-build-and-test:
    runs-on: ubuntu-latest
    env:
      DOTNET_INSTALL_DIR: ..dotnet

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Cache .Net dependencies
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('./**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'

    - name: Restore dependencies
      run: dotnet restore ./**/*.sln

    - name: Clean Up Old Test and Coverage Results
      run: |
        echo "Removing old TestResults and coverage reports..."
        rm -rf TestResults
        rm -rf coverage-reports

    - name: Discover and Run Tests with Coverage
      run: |
        mkdir -p coverage-reports
        # Find all test projects
        for test_project in $(find ./ -name "*.csproj" | grep "tests"); do
          echo "Running tests for $test_project"
          project_name=$(basename $test_project .csproj)
          # Run tests with coverage
          dotnet test $test_project --configuration Release --verbosity detailed \
            --collect:"XPlat Code Coverage" \
            --results-directory TestResults/$project_name \
            /p:CollectCoverage=true \
            /p:CoverletOutput=TestResults/$project_name/coverage-results/ \
            /p:CoverletOutputFormat=cobertura

          # Generate report for this test project
          echo "Generating coverage report for $project_name"
          reportgenerator -reports:"TestResults/$project_name/**/coverage.cobertura.xml" \
                          -targetdir:"coverage-reports/$project_name" \
                          -reporttypes:"HtmlInline_AzurePipelines;Cobertura"
        done
      env:
        PATH: $PATH:/home/runner/.dotnet/tools
        DOTNET_CLI_TELEMETRY_OPTOUT: 1
        DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1

    - name: Upload Coverage Reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports
        path: coverage-reports

    - name: Coverage Report Summary
      run: |
        echo "Summarizing coverage per test file..."
        mkdir -p summary-reports
        for report_dir in $(find coverage-reports -mindepth 1 -maxdepth 1 -type d); do
          project_name=$(basename $report_dir)
          coverage_file="$report_dir/Cobertura.xml"
          
          if [ -f "$coverage_file" ]; then
            echo "Processing coverage for $project_name"
            
            # Extract line-rate values
            percentages=$(grep -oP 'line-rate="[^"]+"' "$coverage_file" | grep -oP '[0-9.]+')
            total_coverage=0
            count=0
            while read -r line; do
              total_coverage=$(echo "$total_coverage + $line" | bc)
              count=$((count + 1))
            done <<< "$percentages"

            if [[ $count -gt 0 ]]; then
              total_percentage=$(echo "scale=2; ($total_coverage / $count) * 100" | bc)
              echo "Coverage for $project_name: $total_percentage%" | tee -a summary-reports/coverage-summary.txt
            else
              echo "No valid coverage data for $project_name" | tee -a summary-reports/coverage-summary.txt
            fi
          else
            echo "Coverage report not found for $project_name" | tee -a summary-reports/coverage-summary.txt
          fi
        done

        echo "Coverage Summary:"
        cat summary-reports/coverage-summary.txt
        echo "Coverage Summary:" >> $GITHUB_STEP_SUMMARY
        cat summary-reports/coverage-summary.txt >> $GITHUB_STEP_SUMMARY

    - name: Upload Coverage Summary
      uses: actions/upload-artifact@v4
      with:
        name: coverage-summary
        path: summary-reports
