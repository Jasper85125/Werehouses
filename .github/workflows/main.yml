name: CI and Release

on:
  pull_request:
    branches:
      - '**'

jobs:
  csharp-build-and-test:
    runs-on: ubuntu-latest
    env:
      DOTNET_INSTALL_DIR: ..dotnet

    strategy:
      matrix:
        language: [csharp]
        version: [V1, V2]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Cache .Net dependencies
      if: matrix.language == 'csharp'
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('./**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Setup .NET
      if: matrix.language == 'csharp'
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'
        install-dir: ${{ runner.temp }}/dotnet

    - name: Restore dependencies
      if: matrix.language == 'csharp'
      run: dotnet restore ./${{ matrix.version }}/Cargohub/Werehouses.sln

    - name: Build solution
      if: matrix.language == 'csharp'
      run: |
        dotnet build ./${{ matrix.version }}/Cargohub/Werehouses.sln --configuration Release --no-restore

    - name: Clean Up Old Test and Coverage Results
      if: matrix.language == 'csharp'
      run: |
        echo "Removing old TestResults and coverage reports..."
        rm -rf TestResults
        rm -rf coverage-report-${{ matrix.version }}

    - name: Run MSTest with Coverage
      if: matrix.language == 'csharp'
      run: |
        dotnet test ./${{ matrix.version }}/tests/tests.csproj --configuration Release --verbosity detailed \
          --collect:"XPlat Code Coverage" \
          --results-directory TestResults \
          /p:CollectCoverage=true /p:CoverletOutput=TestResults/coverage-results/ /p:CoverletOutputFormat=cobertura

    - name: Install ReportGenerator
      if: matrix.language == 'csharp'
      run: dotnet tool install --global dotnet-reportgenerator-globaltool

    - name: Generate Coverage Report
      if: matrix.language == 'csharp'
      run: |
        reportgenerator -reports:"TestResults/**/coverage.cobertura.xml" \
                        -targetdir:"coverage-report-${{ matrix.version }}" \
                        -reporttypes:"HtmlInline_AzurePipelines;Cobertura"
      env:
        PATH: $PATH:/home/runner/.dotnet/tools

    - name: Upload Coverage Report
      if: matrix.language == 'csharp'
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report-${{ matrix.version }}
        path: coverage-report-${{ matrix.version }}

    - name: Calculate and Add Coverage to Summary
      if: matrix.language == 'csharp'
      run: |
        percentages=$(grep -oP 'line-rate="[^"]+"' TestResults/**/coverage.cobertura.xml | grep -oP '[0-9.]+')
        total_coverage=0
        count=0
        while read -r line; do
            total_coverage=$(echo "$total_coverage + $line" | bc)
            count=$((count + 1))
        done <<< "$percentages"

        if [[ $count -gt 0 ]]; then
            total_percentage=$(echo "scale=2; ($total_coverage / $count) * 100" | bc)
            echo "Total Percentage Covered: $total_percentage%" > coverage-summary.txt
        else
            echo "No coverage data found." > coverage-summary.txt
        fi

    - name: Update Workflow Summary
      if: matrix.language == 'csharp'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const coverageSummary = fs.readFileSync('coverage-summary.txt', 'utf8');
          const coverageText = `
          ## Coverage Summary for Version ${{ matrix.version }}
          ${coverageSummary}
          `;
          github.rest.checks.update({
            owner: context.repo.owner,
            repo: context.repo.repo,
            check_run_id: context.runId,
            output: {
              title: 'Coverage Summary',
              summary: coverageText
            }
          });

    - name: Run Python Tests
      run: |
        mkdir -p ./PythonTests/reports
        python -m xmlrunner discover -o PythonTests/reports

    - name: Upload Python Test Reports
      uses: actions/upload-artifact@v4
      with:
        name: python-test-reports
        path: PythonTests/reports

  
