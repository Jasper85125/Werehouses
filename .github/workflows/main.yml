name: CI

on:
  push:
    branches:
      - '**'  # Trigger on any push to any branch
  pull_request:
    branches:
      - main  # Trigger for pull requests targeting the 'main' branch

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        language: [csharp, python]
        version: [V1, V2] # Add versions for C# projects

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # Setup for .NET projects
    - name: Setup .NET 8
      if: matrix.language == 'csharp'
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0'  # Update to .NET 8

    # Restore dependencies for the solution
    - name: Restore dependencies
      if: matrix.language == 'csharp'
      run: dotnet restore ./Werehouses/${{ matrix.version }}/CargoHub.sln

    # Build the solution and capture build warnings
    - name: Build solution
      if: matrix.language == 'csharp'
      run: |
        dotnet build ./Werehouses/${{ matrix.version }}/CargoHub.sln --configuration Release --no-restore /p:NoWarn=true > build-warnings.txt 2>&1
      continue-on-error: true  # Allow the job to continue even if there are warnings

    # Upload Build Warnings as an artifact
    - name: Upload Build Warnings
      if: matrix.language == 'csharp'
      uses: actions/upload-artifact@v4
      with:
        name: build-warnings-${{ matrix.version }}
        path: build-warnings.txt

    # Run NUnit tests with coverage
    - name: Run NUnit tests with coverage
      if: matrix.language == 'csharp'
      run: |
        dotnet test ./Werehouses/${{ matrix.version }}/tests/tests.csproj --configuration Release --no-build --verbosity normal --collect:"XPlat Code Coverage"
      env:
        DOTNET_CLI_TELEMETRY_OPTOUT: 1
        DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1

    # Install ReportGenerator globally
    - name: Install ReportGenerator
      if: matrix.language == 'csharp'
      run: dotnet tool install --global dotnet-reportgenerator-globaltool
      env:
        DOTNET_CLI_TELEMETRY_OPTOUT: 1
        DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1

    # Generate Coverage Report
    - name: Generate Coverage Report
      if: matrix.language == 'csharp'
      run: |
        reportgenerator -reports:"./Werehouses/${{ matrix.version }}/tests/TestResults/**/coverage.cobertura.xml" \
                        -targetdir:"coverage-report-${{ matrix.version }}" \
                        -reporttypes:Html
      env:
        PATH: $PATH:/home/runner/.dotnet/tools
        DOTNET_CLI_TELEMETRY_OPTOUT: 1
        DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1

    # Upload Coverage Report as an artifact
    - name: Upload Coverage Report
      if: matrix.language == 'csharp'
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report-${{ matrix.version }}
        path: coverage-report-${{ matrix.version }}

    # Setup for Python projects
    - name: Set up Python
      if: matrix.language == 'python'
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    # Install Python dependencies
    #- name: Install dependencies
     # if: matrix.language == 'python'
      #run: |
       # python -m pip install --upgrade pip
       # if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    # Run Python tests
    #- name: Run Python tests
     # if: matrix.language == 'python'
      #run: |
       # if [ -f pytest.ini ]; then pytest; fi
