name: Deliver Artifacts
on: 
  release:
    types: [published]

jobs:
  csharp-build-and-test:
      runs-on: ubuntu-latest
      env:
        DOTNET_INSTALL_DIR: ..dotnet
  
      strategy:
        matrix:
          language: [csharp]
          version: [V1, V2]
  
      steps:
      - name: Checkout code
        uses: actions/checkout@v4
  
      - name: Cache .Net dependencies
        if: matrix.language == 'csharp'
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('./**/*.csproj')}}
          restore-keys: |
            ${{ runner.os }}-nuget-
  
      - name: Setup .NET
        if: matrix.language == 'csharp'
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'
          install-dir: ${{ runner.temp }}/dotnet
  
      - name: Restore dependencies
        if: matrix.language == 'csharp'
        run: dotnet restore ./${{ matrix.version }}/Cargohub/Werehouses.sln
  
      - name: Build solution
        if: matrix.language == 'csharp'
        run: |
          dotnet build ./${{ matrix.version }}/Cargohub/Werehouses.sln --configuration Release --no-restore
        continue-on-error: true
  
      - name: Clean Up Old Test and Coverage Results
        if: matrix.language == 'csharp'
        run: |
          echo "Removing old TestResults and coverage reports..."
          rm -rf TestResults
          rm -rf coverage-report-${{ matrix.version }}
  
      - name: Run MSTest with Coverage
        if: matrix.language == 'csharp'
        run: |
          dotnet test ./${{ matrix.version }}/tests/tests.csproj --configuration Release --verbosity detailed \
            --collect:"XPlat Code Coverage" \
            --results-directory TestResults \
            /p:CollectCoverage=true /p:CoverletOutput=TestResults/coverage-results/ /p:CoverletOutputFormat=cobertura
        continue-on-error: true
  
      - name: Install ReportGenerator
        if: matrix.language == 'csharp'
        run: dotnet tool install --global dotnet-reportgenerator-globaltool
  
      - name: Generate Coverage Report
        if: matrix.language == 'csharp'
        run: |
          reportgenerator -reports:"TestResults/**/coverage.cobertura.xml" \
                          -targetdir:"coverage-report-${{ matrix.version }}" \
                          -reporttypes:"HtmlInline_AzurePipelines;Cobertura"
        env:
          PATH: $PATH:/home/runner/.dotnet/tools
          DOTNET_CLI_TELEMETRY_OPTOUT: 1
          DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  
      - name: Upload Coverage Report
        if: matrix.language == 'csharp'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ matrix.version }}
          path: coverage-report-${{ matrix.version }}
  
  Deliver-Artifacts:
    runs-on: ubuntu-latest
    needs: csharp-build-and-test
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Build for Windows
      run: |
        dotnet publish ./V1/Cargohub/Werehouses.csproj -c Release -r win-x64 --self-contained false -o ./publish
        dotnet publish ./V2/Cargohub/Werehouses.csproj -c Release -r win-x64 --self-contained false -o ./publish

    - name: Create ZIP package
      run: zip -r windows-release-v${{ github.run_number }}.zip ./publish

    - name: Upload ZIP artifact
      uses: actions/upload-artifact@v4
      with:
        name: windows-release-v${{ github.run_number }}
        path: windows-release-v${{ github.run_number }}.zip
